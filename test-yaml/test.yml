---
Parameters:
  SecurityGroupDescription:
    Description: Security Group Description
    Type: String

Resources:
  EC2SecretManager:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: MySecretsManagerPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - "secretsmanager:GetSecretValue"
                  - "secretsmanager:DescribeSecret"
                  - "secretsmanager:ListSecrets"
                  - "secretsmanager:CreateSecret"
                  - "secretsmanager:UpdateSecret"
                  - "secretsmanager:DeleteSecret"
                  - "secretsmanager:TagResource"
                  - "secretsmanager:UntagResource"
                  - "secretsmanager:PutResourcePolicy"
                Resource: "*"
  MyInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref EC2SecretManager
  # Subnets in different Availability Zones
  SubnetA:
    Type: AWS::EC2::Subnet
    Properties: 
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: 10.0.1.0/24
  
  SubnetB:
    Type: AWS::EC2::Subnet
    Properties: 
      VpcId: !Ref VPC
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: 10.0.2.0/24
  
  SubnetC:
    Type: AWS::EC2::Subnet
    Properties: 
      VpcId: !Ref VPC
      AvailabilityZone: !Select [2, !GetAZs '']
      CidrBlock: 10.0.3.0/24

  # VPC
  VPC:
    Type: AWS::EC2::VPC
    Properties: 
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default

  MyInstanceA:
    Type: AWS::EC2::Instance
    Properties:
      SubnetId: !Ref SubnetA
      ImageId: ami-078701cc0905d44e4
      InstanceType: t3.micro
      IamInstanceProfile: !Ref MyInstanceProfile

      SecurityGroupIds:
        - !Ref SSHSecurityGroup
        - !Ref HTTPSecurityGroup
      UserData: 
        Fn::Base64: | 
          #!/bin/bash -xe
          yum update -y

          # Install Docker
          amazon-linux-extras install docker -y
          service docker start
          systemctl enable docker
          usermod -a -G docker ec2-user
          chmod 666 /var/run/docker.sock

          # Install Docker Compose
          curl -L https://github.com/docker/compose/releases/download/1.22.0/docker-compose-$(uname -s)-$(uname -m) -o /usr/local/bin/docker-compose
          chmod +x /usr/local/bin/docker-compose

          # Mount Drive
          mkdir /data
          mkfs -t xfs /dev/sdf
          mount /dev/sdf /data


          # Install git in your EC2 instance
          yum install git -y
          pip3 install boto3

          # Clone and run a sample application
          cd /home/ec2-user
          git clone https://github.com/CapybaraDevOps/flask-repo.git
          cd flask-repo
          chmod +x cred.py
          python3 cred.py
          docker-compose --file docker-compose.yml up -d
          chmod +x get_cert.py
          python3 get_cert.py
          docker-compose --file docker-compose.yml down
          docker-compose --file docker-compose.yml build
          docker-compose --file docker-compose.yml up
        
  MyInstanceB:
    Type: AWS::EC2::Instance
    Properties:
      SubnetId: !Ref SubnetB
      ImageId: ami-078701cc0905d44e4
      InstanceType: t3.micro
      IamInstanceProfile: !Ref MyInstanceProfile

      SecurityGroupIds:
        - !Ref SSHSecurityGroup
        - !Ref HTTPSecurityGroup
      UserData: 
        Fn::Base64: | 
          #!/bin/bash -xe
          yum update -y

          # Install Docker
          amazon-linux-extras install docker -y
          service docker start
          systemctl enable docker
          usermod -a -G docker ec2-user
          chmod 666 /var/run/docker.sock

          # Install Docker Compose
          curl -L https://github.com/docker/compose/releases/download/1.22.0/docker-compose-$(uname -s)-$(uname -m) -o /usr/local/bin/docker-compose
          chmod +x /usr/local/bin/docker-compose

          # Mount Drive
          mkdir /data
          mkfs -t xfs /dev/sdf
          mount /dev/sdf /data


          # Install git in your EC2 instance
          yum install git -y
          pip3 install boto3

          # Clone and run a sample application
          cd /home/ec2-user
          git clone https://github.com/CapybaraDevOps/flask-repo.git
          cd flask-repo
          chmod +x cred.py
          python3 cred.py
          docker-compose --file docker-compose.yml up -d
          chmod +x get_cert.py
          python3 get_cert.py
          docker-compose --file docker-compose.yml down
          docker-compose --file docker-compose.yml build
          docker-compose --file docker-compose.yml up

  MyInstanceC:
    Type: AWS::EC2::Instance
    Properties:
      SubnetId: !Ref SubnetC
      ImageId: ami-078701cc0905d44e4
      InstanceType: t3.micro
      IamInstanceProfile: !Ref MyInstanceProfile

      SecurityGroupIds:
        - !Ref SSHSecurityGroup
        - !Ref HTTPSecurityGroup
      UserData: 
        Fn::Base64: | 
          #!/bin/bash -xe
          yum update -y

          # Install Docker
          amazon-linux-extras install docker -y
          service docker start
          systemctl enable docker
          usermod -a -G docker ec2-user
          chmod 666 /var/run/docker.sock

          # Install Docker Compose
          curl -L https://github.com/docker/compose/releases/download/1.22.0/docker-compose-$(uname -s)-$(uname -m) -o /usr/local/bin/docker-compose
          chmod +x /usr/local/bin/docker-compose

          # Mount Drive
          mkdir /data
          mkfs -t xfs /dev/sdf
          mount /dev/sdf /data


          # Install git in your EC2 instance
          yum install git -y
          pip3 install boto3

          # Clone and run a sample application
          cd /home/ec2-user
          git clone https://github.com/CapybaraDevOps/flask-repo.git
          cd flask-repo
          chmod +x cred.py
          python3 cred.py
          docker-compose --file docker-compose.yml up -d
          chmod +x get_cert.py
          python3 get_cert.py
          docker-compose --file docker-compose.yml down
          docker-compose --file docker-compose.yml build
          docker-compose --file docker-compose.yml up
      
      
  # an elastic IP for our instance
  MyEIPA:
    Type: AWS::EC2::EIP
    Properties:
      InstanceId: !Ref MyInstanceA
  MyEIPB:
    Type: AWS::EC2::EIP
    Properties:
      InstanceId: !Ref MyInstanceB
  MyEIPC:
    Type: AWS::EC2::EIP
    Properties:
      InstanceId: !Ref MyInstanceC

  # our EC2 security group
  SSHSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH access via port 22
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          FromPort: 22
          IpProtocol: tcp
          ToPort: 22

  HTTPSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: Enable standard web access
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - CidrIp: "0.0.0.0/0"
          FromPort: 80
          ToPort: 80
          IpProtocol: tcp
        - CidrIp: "0.0.0.0/0"
          FromPort: 443
          ToPort: 443
          IpProtocol: tcp

  ExternalVolumeA:
    Type: AWS::EC2::Volume
    Properties:  
      AvailabilityZone: !Select [0, !GetAZs '']
      Size: 4
      VolumeType: gp2
  ExternalVolumeB:
    Type: AWS::EC2::Volume
    Properties:  
      AvailabilityZone: !Select [1, !GetAZs '']
      Size: 4
      VolumeType: gp2
  ExternalVolumeC:
    Type: AWS::EC2::Volume
    Properties:  
      AvailabilityZone: !Select [2, !GetAZs '']
      Size: 4
      VolumeType: gp2

  MountPointA:
    Type: AWS::EC2::VolumeAttachment
    Properties:
      InstanceId: !Ref MyInstanceA
      VolumeId: !Ref ExternalVolumeA
      Device: /dev/sdf
  MountPointB:
    Type: AWS::EC2::VolumeAttachment
    Properties:
      InstanceId: !Ref MyInstanceB
      VolumeId: !Ref ExternalVolumeB
      Device: /dev/sdf
  MountPointC:
    Type: AWS::EC2::VolumeAttachment
    Properties:
      InstanceId: !Ref MyInstanceC
      VolumeId: !Ref ExternalVolumeC
      Device: /dev/sdf